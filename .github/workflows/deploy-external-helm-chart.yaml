name: deploy-to-eks

on:
  workflow_dispatch:
    inputs:
      build_number:
        default: '10'
        type: string
        required: true
      k8s_namespace:
        default: 'default'
        type: string
        required: true
      github_metadata:
        default: '{"general":{"name":"120ang17_CD","repoName":"120ang17","sonarProjectKey":"devsecops_120ang17","helmReleaseName":"a120ang17","contextPath":"/120nest10","sonarHost":"https://sonarqube.tenant604134.ibdp.calibo.com","tenant":"Tenant950174","lazsaDomainUri":"https://lazsa-dis.calibo.com","devopsSettingId":"3c7e6b67-e0bc-4bb7-9260-9f9e7bad20b8","agentApiKey":"zMhoTfcHkPZb4XM2z7TdmFj8iql6P0buiq8IWNw2oegAQdhejQ mlaPLjpMkhxeOVQ3 LGdLan lmyXXsSnky xRw88dkWnBnJh6yytW55zcV0jby8DpKBva3hGKHMLZBXvyK/3zk9koZ GROkHexHAGocsxhCmzuzXMUffFajSSvjB3nHWekvbfs5AtxQM5vKIy/PJOZHaSUjAoXWKRF6K8hkLCBu2OksPXRE1DSao=","agentId":"d32f0932-76e1-41d8-a7ca-e5f424544a79","orchCertCredentialId":"","sonarOrg":"default-organization","artifactory":"JFROG","artifactorySecret":"Tenant950174-38f4e023-93dc-4fec-851b-b6db3317356d-JFROG","kubernetesSecret":"Tenant950174-b75b4b82-5648-403e-9c76-79389f2ee7fb","containerScanType":"","dynamicJenkinsStage":"false","stageFlag":"{\"sonarScan\":true,\"zapScan\":false,\"containerScan\":false,\"qualysScan\":false,\"FunctionalTesting\":false}","dockerHostIP":"","containerImagePath":"artifactory.tenant604134.ibdp.calibo.com/towerofgods-docker-albstagelevel-local/godsslayer/120ang17","containerImageTag":"latest","sonarSecret":"Tenant950174-336451cb-b0fc-45e9-9f6e-d3f1e4704a3b-sonar","artifactPublish":false},"docker":{"appPort":"4200","hostPort":"4200"},"helm":{"additionalArguments":"","additionalFiles":"","workingDirectory":"helm_chart","namespace":"dev4","type":"lazsa","values":""},"kubernetes":{"namespace":"dev4","replicaCount":"1","resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"200m","memory":"256Mi"}},"ingress":{"enabled":true,"paths":{"path":"/120nest10"},"hosts":["alb1.tenant621248.ibdp.calibo.com"],"ingressClass":"alb","controllerType":"alb","albExtraAnnotations":{"alb.ingress.kubernetes.io/group.name":"newalb"}},"service":{"type":"ClusterIP"}}}'
        type: string
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'dev'
      url: 'https://test.com'
    env:
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Initialization
        run: |
          sudo apt install yq -y 
          JSON_STRING='${{ inputs.github_metadata }}'
         
          echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
          echo "BUILD_TAG=$(echo "$JSON_STRING" | jq -r '.general.containerImageTag')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY_CREDENTIALS=$(echo "$JSON_STRING" | jq -r '.general.artifactorySecret')"  >> "$GITHUB_ENV"
          echo "SONAR_CREDENTIAL_ID=$(echo "$JSON_STRING" | jq -r '.general.sonarSecret')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY=$(echo "$JSON_STRING" | jq -r '.general.artifactory')"  >> "$GITHUB_ENV"
          echo "STAGE_FLAG=$(echo "$JSON_STRING" | jq -r '.general.stageFlag')"  >> "$GITHUB_ENV"
          echo "CONTAINERSCANTYPE=$(echo "$JSON_STRING" | jq -r '.general.containerScanType')"  >> "$GITHUB_ENV"
          echo "DOCKERHOST=$(echo "$JSON_STRING" | jq -r '.general.dockerHostIP')"  >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$(echo "$JSON_STRING" | jq -r '.general.name')"  >> "$GITHUB_ENV"
          echo "CONTEXT=$(echo "$JSON_STRING" | jq -r '.general.contextPath')" >> "$GITHUB_ENV"
          echo "sonar_org=$(echo "$JSON_STRING" | jq -r '.general.sonarOrg')" >> "$GITHUB_ENV"
          echo "sonar_host=$(echo "$JSON_STRING" | jq -r '.general.sonarHost')" >> "$GITHUB_ENV"
          echo "sonar_project_key=$(echo "$JSON_STRING" | jq -r '.general.sonarProjectKey')" >> "$GITHUB_ENV"
          echo "helmReleaseName=$(echo "$JSON_STRING" | jq -r '.general.helmReleaseName')" >> "$GITHUB_ENV"
          echo "namespace_name=$(echo "$JSON_STRING" | jq -r '.kubernetes.namespace')" >> "$GITHUB_ENV"
          
          echo "helmRepoUrl=$(echo "$JSON_STRING" | jq -r '.helm.helmRepoUrl')" >> "$GITHUB_ENV"
          echo "helmWorkingDirectory=$(echo "$JSON_STRING" | jq -r '.helm.workingDirectory')" >> "$GITHUB_ENV"
          echo "helmvaluesPath=$(echo "$JSON_STRING" | jq -r '.helm.values')" >> "$GITHUB_ENV"
          echo "helmRepoBranch=$(echo "$JSON_STRING" | jq -r '.helm.helmRepoBranch')" >> "$GITHUB_ENV"

         
          echo "HELM_REPO_PATH=$(echo "$helmRepoUrl" | cut -d'/' -f4-5 | sed 's/.git$//')" >> "$GITHUB_ENV"
          echo "Extracted Repository Path: $REPO_PATH"
          

          echo "$JSON_STRING" | jq -r '.kubernetes' | yq -P > Helm.yaml
          #echo "$JSON_STRING" | jq -r '.kubernetes.vault' | yq -P > Vault.yaml    
          
      - name: Checkout External Helm Chart Repo
        uses: actions/checkout@v2
        with:
          repository: $HELM_REPO_PATH
          ref: $helmRepoBranch
          path: ./external_helm
      

      - name: Configure Kubeconfig File
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "${{ env.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config

          
    
      - name: Deploy to Kubernetes
        run: |
           
           docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION create ns "$namespace_name" || true
           if [[ $DEPLOYMENT_TYPE == 'OPENSHIFT' ]]
              COUNT=$(grep 'serviceAccount' Helm.yaml | wc -l)
              if [[ $COUNT -gt 0 ]]
              then
                  ACCOUNT=$(grep 'serviceAccount:' Helm.yaml | tail -n1 | awk '{ print $2}')
                  echo $ACCOUNT
              else
                  ACCOUNT='default'
              fi
              docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$WORKSPACE":/apps -w /apps $OC_IMAGE_VERSION oc adm policy add-scc-to-user anyuid -z $ACCOUNT -n "$namespace_name"
           fi
           
           DOCKER_LOGIN_URL=$(echo "$REGISTRY_URL" | cut -d'/' -f1)
            
           ## hardcoded name regcred need to be change
           docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION -n "$namespace_name" delete secret regcred --ignore-not-found || true
           docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" $KUBECTL_IMAGE_VERSION -n "$namespace_name" create secret docker-registry regcred --docker-server="$DOCKER_LOGIN_URL" --docker-username="$USERNAME" --docker-password="$PASSWORD" || true
                                               
           # custom helm chart
           if [[ $helmRepoUrl != null && $helmRepoUrl != '' ]]
           then
             cd external_helm
             docker run --rm  --user root -v "$HOME/.kube/config":"/.kube/config" -e KUBECONFIG="/.kube/config" -v "$WORKSPACE":/apps -w /apps/external_helm $HELM_IMAGE_VERSION upgrade --install "$helmReleaseName" -n "$namespace_name" "$helmWorkingDirectory" --atomic --timeout 300s --set image.repository="$REGISTRY_URL" --set image.tag="$BUILD_TAG" --set image.registrySecret="regcred"  --set service.internalport="$SERVICE_PORT" --set context="$CONTEXT" -f "$helmvalues" -f ../vault.yaml
           fi
            
