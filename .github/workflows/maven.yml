# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven


name: Java CI with Maven

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:
   inputs:
    github_general:
      default: '{"name":"workflow", "age":30, "car":null}'
      type: string
      required: true
   
    
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
     GITHUB_GENERAL: '{"name":"commit", "age":30, "car":null}'

    steps:
    - if:  github.event_name == 'workflow_dispatch'
      run: |
        echo "GITHUB_GENERAL=${{ github.event.inputs.github_general }}" >> $GITHUB_ENV
    
     
    # creating json file
    - name: create-json for metadata
      id: create-json
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "github_general.json"
        json: ${{ env.GITHUB_GENERAL }}

    - name: use output
      run: |
        echo "repo_name=$(cat github_general.json | jq -r '.name')" >> $GITHUB_ENV
        echo "artifactory_type=$(cat github_general.json | jq -r '.age')" >> $GITHUB_ENV
        echo "artifactory_username=$(cat github_general.json | jq -r '.artifactoryUsernameCredentialId')" >> $GITHUB_ENV
        echo "artifactory_password=$(cat github_general.json | jq -r '.artifactoryPasswordCredentialId')" >> $GITHUB_ENV
        echo "sonar_host=$(cat github_general.json | jq -r '.sonarHost')" >> $GITHUB_ENV
        echo "sonar_token=$(cat github_general.json | jq -r '.sonarTokenCredentialId')" >> $GITHUB_ENV
        echo "repository_url=$(cat github_general.json | jq -r '.repositoryUrl')" >> $GITHUB_ENV
        echo ${{ env.repo_name }}
        
    - name: Testing
      run: |
        echo "Trigger Type: ${{ github.event_name }}"
        echo "github environment : ${GITHUB_ENV}"
        echo  "Env: ${{ env.GITHUB_GENERAL }}"
        echo "RUN_NUMBER=IMAGE_NAME" >> $GITHUB_ENV
        
    - run: |
        echo ${{ secrets[env.RUN_NUMBER] }}
        echo '::set-output name=secret::${{ secrets.IMAGE_NAME }}'
      id: test_secret
      
    - run: | 
       echo ${{ steps.test_secret.outputs.secret }}
        
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven  
  
  # Since with is a map and cannot interpret shell so we need to export it and use it as env variable.
    - name: exporting Workflow number
      run: echo "RUN_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

# Since we cannot use secrets in if conditions
    - name: Assign variable Repository type
      id: registry_type
      run: echo '::set-output name=secret::${{ secrets.REPOSITORY_TYPE }}'
  # Since we need docker image name in lower case, using this funciton.
    - id: project_name
      uses: ASzc/change-string-case-action@v2
      with:
        string: ${{ env.PROJECT_NAME }} 
      
    - name: Maven Build and Install
      run: mvn clean install -Dmaven.test.skip=true
      
    - name: Maven Test
      run: mvn test --batch-mode

    - name: Testing Sonar Scan
      uses: SonarSource/sonarqube-scan-action@v3.0.0
      with:
        args: >
         -Dsonar.java.binaries='.'
         -Dsonar.exclusions='pom.xml, target/**/*'
         -Dsonar.projectKey=$SONAR_PROJECT_KEY 
         -Dsonar.projectName=$SONAR_PROJECT_KEY 
         -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} 
         -Dsonar.login=$SONAR_TOKEN  
      env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
         SONAR_PROJECT_KEY: ${{ env.PROJECT_NAME }}      
      
    # - name: SonarQube Scan
    #   run: mvn --batch-mode -V -U -e org.sonarsource.scanner.maven:sonar-maven-plugin:3.0:sonar -Dsonar.java.binaries='.' -Dsonar.exclusions='pom.xml, target/**/*' -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName=$SONAR_PROJECT_KEY -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=$SONAR_TOKEN
    #   env:
    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #    SONAR_PROJECT_KEY: ${{ env.PROJECT_NAME }}

 # Docker Related tasks.
# This will work for Azure Container Registry and Jfrog as the authentication mechanism is same.
# actions support provided by Docker.
# URL : https://github.com/marketplace/actions/build-and-push-docker-images

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - if: steps.registry_type.outputs.secret != 'AWS'
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.REPOSITORY_URL }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - if: steps.registry_type.outputs.secret != 'AWS'
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.REPOSITORY_URL }}/${{ steps.project_name.outputs.lowercase }}:${{ env.RUN_NUMBER }}

# Docker aws login and publish on ECR.
    - name: Configure AWS credentials
      if: steps.registry_type.outputs.secret == 'AWS'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      if: steps.registry_type.outputs.secret == 'AWS'
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      if: steps.registry_type.outputs.secret == 'AWS'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ steps.project_name.outputs.lowercase }}
        IMAGE_TAG: ${{ env.RUN_NUMBER }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
