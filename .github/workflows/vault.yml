name: Qualys Scan Test

on:
  workflow_dispatch:
    inputs:
      github_metadata:
        default: '{"general":{"name":"120ang17_CI","repoName":"120ang17","sonarProjectKey":"devsecops_120ang17","helmReleaseName":"a120ang17","contextPath":"/120nest10","sonarHost":"https://sonarqube.tenant604134.ibdp.calibo.com","tenant":"Tenant950174","lazsaDomainUri":"https://lazsa-dis.calibo.com","devopsSettingId":"3c7e6b67-e0bc-4bb7-9260-9f9e7bad20b8","agentApiKey":"zMhoTfcHkPZb4XM2z7TdmFj8iql6P0buiq8IWNw2oegAQdhejQ+mlaPLjpMkhxeOVQ3+LGdLan+lmyXXsSnky+xRw88dkWnBnJh6yytW55zcV0jby8DpKBva3hGKHMLZBXvyK/3zk9koZ+GROkHexHAGocsxhCmzuzXMUffFajRWe8TwL4zfuep1W7VoPmVDsotdp67yQwo9t60luT5WXKK8hkLCBu2OksPXRE1DSao\u003d","agentId":"d32f0932-76e1-41d8-a7ca-e5f424544a79","orchCertCredentialId":"","sonarOrg":"default-organization","artifactory":"JFROG","artifactorySecret":"Tenant950174-38f4e023-93dc-4fec-851b-b6db3317356d-JFROG","kubernetesSecret":"Tenant950174-b75b4b82-5648-403e-9c76-79389f2ee7fb","containerScanType":"XRAY","dynamicJenkinsStage":"false","stageFlag":"{\"sonarScan\":true,\"zapScan\":false,\"containerScan\":false,\"qualysScan\":false,\"FunctionalTesting\":false}","dockerHostIP":"","containerImagePath":"artifactory.tenant604134.ibdp.calibo.com/towerofgods-docker-albstagelevel-local/godsslayer/120ang17","sonarSecret":"Tenant950174-336451cb-b0fc-45e9-9f6e-d3f1e4704a3b-sonar","artifactPublish":false},"docker":{"appPort":"4200","hostPort":"4200"},"helm":{"additionalArguments":"","additionalFiles":"","workingDirectory":"helm_chart","namespace":"dev4","type":"lazsa","values":""},"kubernetes":{"namespace":"dev4","replicaCount":"1","resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"200m","memory":"256Mi"}},"ingress":{"enabled":true,"paths":{"path":"/120nest10"},"ingressClass":"alb","controllerType":"alb","albExtraAnnotations":{"alb.ingress.kubernetes.io/group.name":"newalb"}},"service":{"type":"ClusterIP"}}}'
        type: string
        required: false
  
jobs:
  deploy:
    runs-on: self-hosted
    environment:
      name: 'dev'
      url: 'https://test.com'
    env:
      JAVA_MVN_IMAGE_VERSION: "amazoncorretto:8-alpine" #https://hub.docker.com/_/maven/tags
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags
      REGISTRY_URL: "abhijeetka/kong-injector"
      BUILD_TAG: "v1.0.0"
      SECRET_NAME: "JFROG_URL"
    

    steps:
        
      - name: Initialization
        run: |
                sudo yum install jq -y 
                JSON_STRING='${{ inputs.github_metadata }}'
               
                echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
                echo "CONTAINER_SCAN_TYPE=$(echo "$JSON_STRING" | jq -r '.general.containerScanType')" >> "$GITHUB_ENV"

      
                #echo "$JSON_STRING" | jq -r '.kubernetes' | yq -P > Helm.yaml
                #echo "$JSON_STRING" | jq -r '.kubernetes.vault' | yq -P > Vault.yaml

      - name: Print ContainerScanType
        run: echo "$CONTAINER_SCAN_TYPE"

      - name: Setup JFrog CLI
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets[env.SECRET_NAME] }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}

      - name: Container Image Scan
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        run: jf docker scan $REGISTRY_URL:$BUILD_TAG
          
          
      
