name: HCP-Vault-Test

on:
  workflow_dispatch:
    inputs:
      build_number:
        default: '10'
        type: string
        required: true
      k8s_namespace:
        default: 'default'
        type: string
        required: true
      github_metadata:
        default: '{"general":{"name":"Testing-React19-Typescript_CI","repoName":"Testing-React19-Typescript","sonarProjectKey":"Tenant950174_Testing-React19-Typescript","helmReleaseName":"testing-react19-typescript","contextPath":"/hhnggbh","sonarHost":"https://sonarqube.tenant604134.ibdp.calibo.com","tenant":"Tenant950174","lazsaDomainUri":"https://lazsa-dis.calibo.com","devopsSettingId":"3c7e6b67-e0bc-4bb7-9260-9f9e7bad20b8","agentApiKey":"zMhoTfcHkPZb4XM2z7TdmFj8iql6P0buiq8IWNw2oegAQdhejQ+mlaPLjpMkhxeOVQ3+LGdLan+lmyXXsSnky+xRw88dkWnBnJh6yytW55zcV0jby8DpKBva3hGKHMLZBXvyK/3zk9koZ+GROkHexM/V/jdRNnyWQuatMNcbrIWMDctZVE33FFKUYXwFHcjm0dqrKJd6OOBvC8RCslhKe6K8hkLCBu2OksPXRE1DSao\u003d","agentId":"d32f0932-76e1-41d8-a7ca-e5f424544a79","orchCertCredentialId":"","sonarOrg":"default-organization","artifactory":"JFROG","artifactorySecret":"Tenant950174-38f4e023-93dc-4fec-851b-b6db3317356d-JFROG","containerScanType":"QUALYS","dynamicJenkinsStage":"false","stageFlag":"{\"sonarScan\":true,\"zapScan\":false,\"containerScan\":true,\"qualysScan\":false,\"FunctionalTesting\":false}","dockerHostIP":"","containerImagePath":"artifactory.tenant604134.ibdp.calibo.com/testing-docker-dev-local/sonartesting/testing-react19-typescript","containerImageTag":"latest","sonarSecret":"Tenant950174-336451cb-b0fc-45e9-9f6e-d3f1e4704a3b-sonar","artifactPublish":false},"docker":{"vault":{"type":"vault","configuration":{"vaultUrl":"https://vault.tooling.ibdp.calibo.com","vaultCredentialId":"testing","engineVersion":"2"},"secrets":{"path":"/kv/data/dev/apps/service01","engineVersion":"2","secretValues":[{"envVariable":"APP_KEY","vaultKey":"appkey"},{"envVariable":"APP_TOKEN","vaultKey":"apptoken"}]}},"appPort":"3014","hostPort":"3014"},"helm":{},"kubernetes":{}}'
        type: string
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: 'dev'
      url: 'https://test.com'
    env:
      JAVA_MVN_IMAGE_VERSION: "amazoncorretto:8-alpine" #https://hub.docker.com/_/maven/tags
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Initialization
        run: |
          JSON_STRING='${{ inputs.github_metadata }}'
         
          echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
          echo "BUILD_TAG=${{ github.run_number }}"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY_CREDENTIALS=$(echo "$JSON_STRING" | jq -r '.general.artifactorySecret')"  >> "$GITHUB_ENV"
          echo "SONAR_CREDENTIAL_ID=$(echo "$JSON_STRING" | jq -r '.general.sonarSecret')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY=$(echo "$JSON_STRING" | jq -r '.general.artifactory')"  >> "$GITHUB_ENV"
          echo "STAGE_FLAG=$(echo "$JSON_STRING" | jq -r '.general.stageFlag')"  >> "$GITHUB_ENV"
          echo "CONTAINER_SCAN_TYPE=$(echo "$JSON_STRING" | jq -r '.general.containerScanType')"  >> "$GITHUB_ENV"
          echo "DOCKERHOST=$(echo "$JSON_STRING" | jq -r '.general.dockerHostIP')"  >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$(echo "$JSON_STRING" | jq -r '.general.name')"  >> "$GITHUB_ENV"
          echo "CONTEXT=$(echo "$JSON_STRING" | jq -r '.general.contextPath')" >> "$GITHUB_ENV"
          echo "sonar_org=$(echo "$JSON_STRING" | jq -r '.general.sonarOrg')" >> "$GITHUB_ENV"
          echo "sonar_host=$(echo "$JSON_STRING" | jq -r '.general.sonarHost')" >> "$GITHUB_ENV"
          echo "sonar_project_key=$(echo "$JSON_STRING" | jq -r '.general.sonarProjectKey')" >> "$GITHUB_ENV"
          echo "ArtifactoryUserSecret=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryUserSecret')" >> "$GITHUB_ENV"
          echo "ArtifactoryPasswordSecret=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryPasswordSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACT_HOST_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryHostSecret')" >> "$GITHUB_ENV"
          echo "DOCKER_LOGIN_URL=$(echo "$REGISTRY_URL" | cut -d'/' -f1)" >> "$GITHUB_ENV"

          # for Vault
          echo "VAULT_CONFIG_PRESENT=$(echo "$JSON_STRING" | jq 'has("docker") and .docker | has("vault")')
          if [[ $VAULT_CONFIG_PRESENT ]]; then
            echo "Vault configuration present"
          else
            echo "Vault Configuration not present."
          fi

      - name: Inject Secret
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kv/data/dev/apps/service01 appkey | TEST_APP_KEY ;
            kv/data/dev/apps/service01 apptoken | TEST_APP_TOKEN ;

      - name: Print Secret
        run: |
          echo "${{ env.TEST_APP_KEY }}"
          echo "${{ steps.import-secrets.outputs.TEST_APP_TOKEN }}"
